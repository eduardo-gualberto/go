// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const getVersion = `-- name: GetVersion :one
SELECT VERSION() AS version
`

func (q *Queries) GetVersion(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getVersion)
	var version string
	err := row.Scan(&version)
	return version, err
}

const listParticipants = `-- name: ListParticipants :many
SELECT id, participant_number, participant_name, user_id FROM participants
`

func (q *Queries) ListParticipants(ctx context.Context) ([]Participant, error) {
	rows, err := q.db.Query(ctx, listParticipants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.ParticipantNumber,
			&i.ParticipantName,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_number, user_name FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.UserNumber, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
